name: Deploy with Optional DB Flush and Live Logs

on:
  workflow_dispatch:
    inputs:
      dbAction:
        description: "Flush DB?"
        required: true
        default: "no"
        type: choice
        options: [yes, no]
      s3Action:
        description: "Flush S3?"
        required: true
        default: "no"
        type: choice
        options: [yes, no]
      cognitoAction:
        description: "Flush Cognito?"
        required: true
        default: "no"
        type: choice
        options: [yes, no]

env:
  AWS_REGION: ap-south-1
  INSTANCE_ID: i-0e7eb8aab2e6b34b1
  SSM_DOCUMENT_NAME: FlushAndDeploy

jobs:
  deploy:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::674845781849:role/github
          aws-region: ${{ env.AWS_REGION }}

      - name: Trigger SSM Document
        id: trigger_ssm
        run: |
          echo "Triggering SSM document with input values..."
          command_id=$(aws ssm send-command \
            --document-name "${SSM_DOCUMENT_NAME}" \
            --targets "Key=InstanceIds,Values=${INSTANCE_ID}" \
            --parameters dbAction=${{ github.event.inputs.dbAction }},s3Action=${{ github.event.inputs.s3Action }},cognitoAction=${{ github.event.inputs.cognitoAction }} \
            --region "${AWS_REGION}" \
            --query "Command.CommandId" --output text)

          echo "command_id=$command_id" >> $GITHUB_OUTPUT

      - name: Simulate Live Log Stream
        run: |
          echo "‚è≥ Streaming SSM logs..."
          command_id=${{ steps.trigger_ssm.outputs.command_id }}
          status="InProgress"
          while [[ "$status" == "InProgress" || "$status" == "Pending" ]]; do
            output=$(aws ssm get-command-invocation \
              --command-id "$command_id" \
              --instance-id "${INSTANCE_ID}" \
              --region "${AWS_REGION}" \
              --output json)

            status=$(echo "$output" | jq -r '.Status')
            echo "Status: $status"
            echo "------ STDOUT ------"
            echo "$output" | jq -r '.StandardOutputContent'
            echo "------ STDERR ------"
            echo "$output" | jq -r '.StandardErrorContent'
            echo "--------------------"
            [[ "$status" == "Success" || "$status" == "Failed" || "$status" == "Cancelled" ]] && break
            sleep 5
          done
